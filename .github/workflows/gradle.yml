# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  pull_request:
    branches:
      - main
      - dev
    types: [closed]
    
permissions:
  id-token: write
  contents: read
  packages: write

env:
  REGION: ap-northeast-2
  CLUSTER_NAME: tmcdapne2-nhwy
  APP_NAME: demoapp

jobs:
  build:
    if: ${{ github.event.pull_request.merged }}
    runs-on: springboot-sample-runner

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Get Short SHA in 8 Length
    - name: get shortsha
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short=8 ${{ github.sha }})" >> $GITHUB_OUTPUT

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew bootBuildImage --imageName=${{ secrets.AWS_ACCOUNT_NUM }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/demoapp:d${{ steps.vars.outputs.sha_short }}

    # AWS 인증
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.REGION }}
        role-to-assume: ${{ secrets.ASSUME_IAM_ROLE }}

    # ECR LOGIN
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Publish Docker image
      run: |
          docker push ${{ secrets.AWS_ACCOUNT_NUM }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/demoapp:d${{ steps.vars.outputs.sha_short }}    

    # - name: Download task definition
    #   run: |
    #      aws ecs describe-task-definition --task-definition demo-tmcdapne2 --query taskDefinition > task-definition.json

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: task-definition.json
    #     container-name: demo
    #     image: ${{ secrets.AWS_ACCOUNT_NUM }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/demoapp:d${{ steps.vars.outputs.sha_short }}

    # - name: Deploy to Amazon ECS
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v2
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: demo-tmcdapne2
    #     cluster: demo-tmcdapne2
    #     wait-for-service-stability: true
    #     codedeploy-appspec: appspec.json
    #     codedeploy-application: demo_app
    #     codedeploy-deployment-group: demo_app
  
    # - name: Checkout k8s-env
    #   uses: actions/checkout@v4
    #   with:
    #     token: ${{ secrets.INFRA_GITHUB_TOKEN }}
    #     repository: DevopsArtFactory/k8s-chart-value
    #     ref: main

    # - name: Change Image tag
    #   run: |
    #     sed -i '/^/s/tag:.*/tag: d${{ steps.vars.outputs.sha_short }}/' ./${CLUSTER_NAME}/${APP_NAME}/image.yaml
    #     ls
    #   shell: bash

    # - name: GIT commit and push docs
    #   env:
    #     CI_COMMIT_MESSAGE: Update Tag - d${{ steps.vars.outputs.sha_short }}
    #     CI_COMMIT_AUTHOR: zerone
    #   run: |
    #     git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
    #     git config --global user.email "zerone5078@gmail.com"
    #     git status
    #     git add -A
    #     git commit -m "${{ env.CI_COMMIT_MESSAGE }}"
    #     git push origin main
